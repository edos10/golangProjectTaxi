// Code generated by github.com/deepmap/oapi-codegen version v1.8.0 DO NOT EDIT.
package httpserver

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Driver defines model for Driver.
type Driver struct {
	// Embedded struct due to allOf(#/components/schemas/LatLngLiteral)
	LatLngLiteral `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Идентификатор водителя
	Id *string `json:"id,omitempty"`
}

// An object describing a specific location with Latitude and Longitude in decimal degrees.
type LatLngLiteral struct {

	// Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// GetDriversParams defines parameters for GetDrivers.
type GetDriversParams struct {

	// Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Longitude in decimal degrees
	Lng float32 `json:"lng"`

	// Radius of serach
	Radius float32 `json:"radius"`
}

// UpdateDriverLocationJSONBody defines parameters for UpdateDriverLocation.
type UpdateDriverLocationJSONBody LatLngLiteral

// UpdateDriverLocationJSONRequestBody defines body for UpdateDriverLocation for application/json ContentType.
type UpdateDriverLocationJSONRequestBody UpdateDriverLocationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /drivers)
	GetDrivers(w http.ResponseWriter, r *http.Request, params GetDriversParams)

	// (POST /drivers/{driver_id}/location)
	UpdateDriverLocation(w http.ResponseWriter, r *http.Request, driverId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDrivers operation middleware
func (siw *ServerInterfaceWrapper) GetDrivers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriversParams

	// ------------- Required query parameter "lat" -------------
	if paramValue := r.URL.Query().Get("lat"); paramValue != "" {

	} else {
		http.Error(w, "Query argument lat is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lat", r.URL.Query(), &params.Lat)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter lat: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "lng" -------------
	if paramValue := r.URL.Query().Get("lng"); paramValue != "" {

	} else {
		http.Error(w, "Query argument lng is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lng", r.URL.Query(), &params.Lng)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter lng: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "radius" -------------
	if paramValue := r.URL.Query().Get("radius"); paramValue != "" {

	} else {
		http.Error(w, "Query argument radius is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "radius", r.URL.Query(), &params.Radius)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter radius: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDrivers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDriverLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateDriverLocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "driver_id" -------------
	var driverId string

	err = runtime.BindStyledParameter("simple", false, "driver_id", chi.URLParam(r, "driver_id"), &driverId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter driver_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDriverLocation(w, r, driverId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		fmt.Println("new router")
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}
	fmt.Println("still alive")


	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/drivers", wrapper.GetDrivers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/drivers/{driver_id}/location", wrapper.UpdateDriverLocation)
	})

	return r
}
